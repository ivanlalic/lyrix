{"version":3,"sources":["components/form.jsx","components/song.jsx","components/info.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","setLyricSearch","useState","artist","song","search","setSearch","error","setError","updateState","e","target","name","value","className","onSubmit","preventDefault","trim","type","placeholder","onChange","Song","lyric","length","Info","information","Object","keys","strArtistThumb","strGenre","strBiographyEN","strFacebook","strTwitter","strLastFMChart","src","alt","href","rel","App","lyricSearch","setLyric","setInformation","useEffect","a","URL","URL2","Promise","all","axios","get","data","lyrics","artists","callAPIs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ce8ea683.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst Form = ({setLyricSearch}) => {\r\n\r\n    const [search, setSearch] = useState({\r\n        artist: '',\r\n        song: ''\r\n    });\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    const { artist, song} = search;\r\n\r\n    //function to read its content\r\n    const updateState = e => {\r\n        setSearch({\r\n            ...search,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    //Call API\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (artist.trim === '' || song.trim() === '') {\r\n            setError(true);\r\n            return;\r\n        } \r\n        setError(false);\r\n\r\n        //Then pass it to app.js\r\n        setLyricSearch(search); //object\r\n\r\n    }\r\n\r\n    return ( \r\n        <div className=\"bg-info\">\r\n            {error ? <p className=\"alert alert-danger text-center p-2\">Inputs requiered</p> : null}\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n\r\n                    <form\r\n                        className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\r\n                        onSubmit={handleSubmit}\r\n                    >\r\n                        <fieldset>\r\n                            <legend\r\n                                className=\"text-center\"\r\n                            >Lyrics Finder</legend>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group\">\r\n                                    <label>Artist</label>\r\n                                    <input \r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        name=\"artist\"\r\n                                        placeholder=\"Name of the artist\"\r\n                                        onChange={updateState}\r\n                                        value={artist}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group\">\r\n                                    <label>Song</label>\r\n                                    <input \r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        name=\"song\"\r\n                                        placeholder=\"Name of the song\"\r\n                                        onChange={updateState}\r\n                                        value={song}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-primary float-right\"\r\n                        >Search</button>\r\n\r\n                        </fieldset>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Form;\r\n","import React, {Fragment} from 'react'\r\n\r\nconst Song = ({lyric}) => {\r\n\r\n    if(lyric.length === 0) return null; //prevent load of empty lyrics \r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Lyrics</h2>\r\n            <p className=\"letra\">{lyric}</p>\r\n        </Fragment>\r\n    )\r\n};\r\n \r\nexport default Song;","import React from 'react';\r\n\r\nconst Info = ({information}) => {\r\n\r\n    if(Object.keys(information).length === 0) return null; //prevent load of empty info \r\n\r\n    const {strArtistThumb, strGenre, strBiographyEN, strFacebook, strTwitter, strLastFMChart} = information;\r\n\r\n    return ( \r\n        <div className=\"card border-light\">\r\n            <div className=\"card-header bg-primary text-light font-weight-bold\">\r\n                Artist Information\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <img src={strArtistThumb} alt=\"Artist Logo\"/>\r\n                <p className=\"card-text\">Genre: {strGenre}</p>\r\n                <h2 className=\"card-text\">Biography:</h2>\r\n                <p className=\"card-text\">{strBiographyEN}</p>\r\n                <p className=\"card-text\">\r\n                    <a href={`https://${strFacebook}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-facebook\"></i>\r\n                    </a>\r\n                    <a href={`https://${strTwitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-twitter\"></i>\r\n                    </a>\r\n                    <a href={`${strLastFMChart}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-lastfm\"></i>\r\n                    </a>\r\n                </p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Info;","import React, {Fragment, useState, useEffect} from 'react';\nimport Form from './components/form';\nimport axios from 'axios';\nimport Song from './components/song';\nimport Info from './components/info';\n\nfunction App() {\n\n  //State\n  const [lyricSearch, setLyricSearch] = useState({});\n  const [lyric, setLyric] = useState('');\n  const [information, setInformation] = useState({});\n\n  useEffect( () => {\n\n    if(Object.keys(lyricSearch).length === 0) return;\n\n    const callAPIs = async () => {\n\n      const {artist, song} = lyricSearch;\n      const URL = `https://api.lyrics.ovh/v1/${artist}/${song}`\n      const URL2 = `https://theaudiodb.com/api/v1/json/1/search.php?s=${artist}`\n\n      const [lyric, information] = await Promise.all([ //Made this to wait for both calls and not one first and then after resolve call the other\n        axios.get(URL), //lyric \n        axios.get(URL2) //info\n      ])\n\n      setLyric(lyric.data.lyrics);\n      setInformation(information.data.artists[0]); //what i get is an object\n\n    }\n\n    callAPIs();\n  }, [lyricSearch, information] )\n\n\n  return (\n    <Fragment>\n      <Form \n        setLyricSearch={setLyricSearch}\n      />\n\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Info \n              information={information}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <Song \n              lyric={lyric}\n            />\n          </div>\n        </div>\n      </div>\n\n\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}